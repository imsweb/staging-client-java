import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar
import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'com.github.spotbugs' version '6.1.11'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.sonatype.gradle.plugins.scan' version '3.1.1'
    id 'org.sonarqube' version '6.1.0.5360'
    id 'com.vanniktech.maven.publish' version '0.31.0'
}

sonarqube {
    properties {
        property "sonar.projectKey", "imsweb_staging-client-java"
        property "sonar.organization", "imsweb"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.cpd.exclusions", "**/com/imsweb/staging/entities/impl/**"
        property "sonar.coverage.exclusions", "**/UpdaterUtils.java"
        property "sonar.gradle.skipCompile", "true"
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.sonatype.gradle.plugins.scan'
    apply plugin: 'org.sonarqube'
    apply plugin: 'com.vanniktech.maven.publish'

    group = 'com.imsweb'
    version = '11.4.0'

    dependencies {
        testImplementation platform('org.junit:junit-bom:5.12.2')
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'

        testImplementation 'org.assertj:assertj-core:3.27.3'
        testImplementation 'com.google.code.bean-matchers:bean-matchers:0.14'
        testImplementation 'org.slf4j:slf4j-simple:2.0.17'
    }

    // fail the build if there are compiler warnings
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        //options.compilerArgs << "-Xlint:all" << "-Xlint:-serial" << "-Xlint:-options" << "-Werror"
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        mavenCentral()
    }

    spotbugs {
        excludeFilter = file("../config/spotbugs/spotbugs-exclude.xml")
    }

    jar {
        manifest {
            attributes('Implementation-Title': project.name,
                    'Implementation-Version': archiveVersion,
                    'Implementation-Vendor': group,
                    'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                    'Built-By': System.getProperty('user.name'),
                    'Built-Date': new Date(),
                    'Built-JDK': System.getProperty('java.version'),
                    'Automatic-Module-Name': 'com.imsweb.algorithms.staging'
            )
        }
    }

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
    test.finalizedBy jacocoTestReport

    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }

    dependencyUpdates {
        // ignore alpha, beta, etc. versions
        rejectVersionIf { selection ->
            isNonStable(selection.candidate.version)
        }
    }

    // Nexus vulnerability scan (see https://github.com/sonatype-nexus-community/scan-gradle-plugin)
    ossIndexAudit {
        outputFormat = 'DEPENDENCY_GRAPH'
        printBanner = false
        excludeCoordinates = ['com.fasterxml.jackson.core:jackson-core:2.14.2']
    }
    check.dependsOn 'ossIndexAudit'

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    // zip up all algorithms
    tasks.register('zipAlgorithms', JavaExec) {
        mainClass.set('com.imsweb.staging.zip.ZipAlgorithm')
        classpath = sourceSets.test.runtimeClasspath
    }

    mavenPublishing {
        configure(new JavaLibrary(new JavadocJar.Javadoc(), true))

        publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL, true)
        signAllPublications()

        pom {
            name = 'Staging Java Client'
            description = 'A cancer staging client library'
            url = 'https://github.com/imsweb/staging-client-java'
            inceptionYear = '2015'

            licenses {
                license {
                    name = 'A modified BSD License (BSD)'
                    url = 'https://github.com/imsweb/staging-client-java/blob/master/LICENSE'
                    distribution = 'repo'
                }
            }

            developers {
                developer {
                    id = 'ctmay4'
                    name = 'Chuck May'
                    email = 'mayc@imsweb.com'
                }
            }

            scm {
                url = 'https://github.com/imsweb/staging-client-java'
                connection = 'scm:https://github.com/imsweb/staging-client-java.git'
                developerConnection = 'scm:git@github.com:imsweb/staging-client-java.git'
            }
        }
    }

    wrapper {
        gradleVersion = '8.14'
        distributionType = Wrapper.DistributionType.ALL
    }
}