import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'checkstyle'
    id 'findbugs'
    id 'com.bmuschko.nexus' version '2.3.1'
    id "io.codearte.nexus-staging" version "0.8.0"  // logs into Sonotype OSS and does a "Close" and "Release"
}

group = 'com.imsweb'
version = '2.11-SNAPSHOT'
description = 'Java client library for staging calculations'

println "Starting build using ${Jvm.current()}"

// UTF-8 for all compilation tasks
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// fail the build if there are compiler warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-serial" << "-Werror"
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.10'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.10'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.10'

    // morphia annotations are needed to make it easier to use in SEER*API
    compile 'org.mongodb.morphia:morphia:1.3.2'

    compile 'com.github.ben-manes.caffeine:caffeine:2.6.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.unitils:unitils-core:3.4.6'
    testCompile 'com.squareup.retrofit2:retrofit:2.3.0'
    testCompile 'com.squareup.retrofit2:converter-jackson:2.3.0'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Vendor': group,
                'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
        )
    }
}

test {
    maxHeapSize = "1g"
}

checkstyle {
    ignoreFailures = true
    configFile = file('config/checkstyle/checkstyle.xml')
}

findbugs {
    ignoreFailures = true
    //reportLevel = 'low'
    excludeFilter = file('config/findbugs/findbugs-exclude.xml')
}

// don't try to release a snapshot to a non-snapshot repository, that won't work anyway
if (version.endsWith('-SNAPSHOT'))
    gradle.startParameter.excludedTaskNames += 'closeAndReleaseRepository'

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

// run the full CS integration test suite
task csIntegrationTest(type: JavaExec) {
    main = 'com.imsweb.staging.cs.CsIntegrationTest'
    classpath = sourceSets.test.runtimeClasspath
}

modifyPom {
    project {
        name 'Staging Java Client'
        description 'A cancer staging client library'
        url 'https://github.com/imsweb/staging-client-java'
        inceptionYear '2015'

        scm {
            url 'https://github.com/imsweb/staging-client-java'
            connection 'scm:https://github.com/imsweb/staging-client-java.git'
            developerConnection 'scm:git@github.com:imsweb/staging-client-java.git'
        }

        licenses {
            license {
                name 'A modified BSD License (BSD)'
                url 'https://github.com/imsweb/staging-client-java/blob/master/LICENSE'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'ctmay4'
                name 'Chuck May'
                email 'mayc@imsweb.com'
            }
            developer {
                id 'depryf'
                name 'Fabian Depry'
                email 'depryf@imsweb.com'
            }
        }
    }
}
